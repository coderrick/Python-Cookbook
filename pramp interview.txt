            1
    2                3
                 4        5 
                        6
        
6 = 1

5 = max(1, 0) + 1 = 2

3 = max(right sub tree, left sub tree) + 1

  = max(1, 2) + 1
  
  = 3

1 = max(right sub tree, left sub tree) + 1

  = max(3, 1) + 1
  = 3 + 1
  = 4

  class Node(object):
  def __init__(self, val):
    self.val = val
    self.left = None
    self.right = None

node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)
node6 = Node(6)
node7 = Node(7)

node1.left = node2
node1.right=  node3
node3.left = node4
node3.right = node5
node5.left = node6
node6.right = node7

#         1
#  2             3
#  
#            4        5
#    
#                  6
#      
#                      7

def get_tree_depth(root):
  if not root:
    return 0
  return max(get_tree_depth(root.left), get_tree_depth(root.right)) + 1

print get_tree_depth(node1)

# Question
# Given a directed graph, design an algorithm to find out whether there is a route
# between two nodes.

class Node(object):
  def __init__(self, val):
    self.val = val
    self.adjacent_nodes = []

node1 = Node(1)
node2 = Node(2)
node3 = Node(3)

node1.adjacent_nodes = [node2, node3]

def path_exists(node1, node2):
  if not node1 or not node2:
    return False
 
  queue = [node1]
  
  visited = set()
  
  while queue:
    node = queue.pop(0)
    for child_node in node.adjacent_nodes:
      if child_node not in visited:
        visited.add(child_node)
        if child_node.val == node2.val:
          return True
        else:
          for i in child_node.adjacent_nodes:
            queue.append(i)
            
  return False

# Question
# Given a directed graph, design an algorithm to find out whether there is a route
# between two nodes.

class Node(object):
  def __init__(self, val):
    self.val = val
    self.adjacent_nodes = []

node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)

node1.adjacent_nodes = [node2, node3]
node3.adjacent_nodes = [node4]

def path_exists(anode1, anode2):
  if not anode1 or not anode2:
    return False
 
  queue = [anode1]
  
  visited = set()
  
  while queue:
    node = queue.pop(0)
    if node.val == anode2.val:
      return True
    for child_node in node.adjacent_nodes:
      if child_node not in visited:
        visited.add(child_node)
        if child_node.val == anode2.val:
          return True
        else:
          for i in child_node.adjacent_nodes:
            queue.append(i)
            
  return False

print path_exists(node1, node4)


///////////////////
using System;

class Solution
{
    static double root(double x, uint n) 
    {
      const double errorRange = 0.001; 
      if( equalByError(x, 1))  return 1;       
      if( equalByError(x, 0))  return 0;
      
      // x < 1, y ^ n = x 
      if( x < 1) return getSmallRangeDivision(1.0, root ( 1.00/x, n)); 
      
      // assuming x > 1
      double start = 1.001; 
      double end = x - 0.001; 
      
      while(start < end && end - start > errorRange )
      {
        double middle = start + (end - start)/2; 
        var checkedValue = Math.Pow(middle, n); 
        
        if(equalByError(checkedValue, x)) return middle; 
        else if(checkedValue < x )
        {
          start = middle; 
        }
        else 
        {
          end = middle;
        }
      }
      
      return start; 
    }

    private static bool equalByError(double x, double y)
    {
      return Math.Abs(x - y) < 0.001; 
    }
  
    private static decimal  getSmallRange(double x)
    {
      return decimal(x , 3); 
    }
  private static double getSmallRangeDivision(double x, double y)
  {
    return (int)(x * 1000/ y) / (double)1000; // error range 0.0001
  }
    static void Main(string[] args)
    {
       double[] result = new double[3]; 
         result[0] = root(7, 3) ; 
         result[1] = root(9, 2); 
         result[2] = root(0.9, 2); 
        foreach(var item in result)
        {
          Console.WriteLine(item); 
        }
        
          
    }
}
jianmin chen    julia coding http://juliachencoding.blogspot.ca/

// 1.913 * 1.913 * 1.913 = 7, n =3
// Math.Abs(2.999 * 2.999 - 9) < 0.001
// binary search - n > 1, range 1, x 
// start = 1
// middle = 1 + ( x -1 )/2, middle ^ n < x, error > 0.001
// middle = start, assuming x > 0 
// is there better than binary search algorithm? O(logn), n = x - 1. 
// edge cases: x nonnegative, x >= 0, if it is 0, the answer is 0
// x = 1, the answer is 1 
// if x in (0 , 1), small than 1, search range x, but it should be less than 1, search range (x, 1)
// else if x > 1, search range is (1, x)
// 0, 1
///
def flattenDictionary(dict):
  result = {}
  dict_to_list = list(dict)
  if dict.size() == 1  // no need, line 11 for loop will take care 
    result.add(dict[0])
    return result
  
  if not dict  // make sense
    return {}
  
  for i in range(len(dict_to_list)
    if isNested()
      result.append("[Keyname].currentKey": flattenDictionary(value))#this is not proper syntax
    else 
      result.append()
  return result
      
#Given helper function
def isNested()
  #Returns true if dictionary key contains value that is a dict
  return true
                 
#Algorithm: Recursive algorithm
# STEPS
# Create new empty dict to store result
# LOOP throught dict keys
# inside loop check to see if the value of key is equal to another dict
# IF value is another dict
# APPEND "[Keyname].currentKey": "VALUE"
# RETURN result DICT


#Edge cases:
#1) Empty dictionary; return empty dictionary
#2) Dictionary with 1 entry; return return dict
#3) Flattening is required

jianmin chen    julia coding http://juliachencoding.blogspot.ca/
                 
                 Derrick Wilson-Duncan github -> @coderrick
                 
                 Li xiuqi - my classmate temple - univeristy 2015
                 Jie Wu professor jie wu advisor 
                 vancouver, canada - 

'''
input:  dict = {
            Key1 : 1,
            Key2 : {
                a : 2,
                b : 3,
                c : {
                    d : 3,
                    e : 1
                }
            }
        }

output: {
            Key1: 1,
            Key2.a: 2,
            Key2.b : 3,
            Key2.c.d : 3,
            Key2.c.e : 1
        }
'''